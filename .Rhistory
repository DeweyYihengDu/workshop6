knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
write_csv(data, file = "./output/data/1.csv")
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
write_csv(data, file = "./output/data/1.csv")
## Write your answer here.
There is a limit to the upload speed of github, and github is not very stable, if the server crashes it will cause precious documents to be lost.
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
#install.packages("pacman", repos = "http://cran.us.r-project.org")
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
# Write your answer here
echo=FALSE the final document will not show the code, only the results of the code run and the image
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
data
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
write_csv(data, file = "./output/data/1.csv")
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
data_1 <- data %>% filter(!(is.na(activity) | is.na(animal_id)))
# Drop irrelevant columns
# Check spelling in species and treatment but also generate a summary table
# Use flextable to render the summary table in a tidy format
data1_1 <- select(data_1 ,-c(loc,animal_id,sl,comment))
data_2 = data1_1 %>% filter(species != "whitedams")
data_new=data_2 %>% group_by(species,treatment) %>% summarise(mean(activity),sd(activity), number = length(activity))
data_new
x= flextable(data_new,  col_keys = names(data_new),
cwidth = 0.75,
cheight = 0.25,
defaults = list(),
theme_fun = theme_booktabs)
set_caption(x,caption = "The table",autonum = NULL,style = "Table Caption",html_escape = TRUE)
# Drop irrelevant columns
# Check spelling in species and treatment but also generate a summary table
# Use flextable to render the summary table in a tidy format
data1_1 <- select(data_1 ,-c(loc,animal_id,sl,comment))
data_2 = data1_1 %>% filter(species != "whitedams")
data_new=data_2 %>% group_by(species,treatment) %>% summarise(mean(activity),sd(activity), number = length(activity))
data_new
x= flextable(data_new,  col_keys = names(data_new),
cwidth = 0.75,
cheight = 0.25,
defaults = list(),
theme_fun = theme_booktabs)
x
# Add your code here
mydata <- select(data1_1, c(species,treatment,activity))
tsf <- function(mydata,x){
testdata=mydata[which(mydata$species == x),]
test=t.test(testdata$activity[which(testdata$treatment=="control")],testdata$activity[which(testdata$treatment=="CO2")], var.equal=T)
p.value=test$p.value
t=test$statistic
species=x
confidence_min=test$conf.int[1]
confidence_max=test$conf.int[2]
df=test$parameter
mean_in_group_CO2=test$estimate[1]
mean_in_group_control=test$estimate[2]
c=data.frame(species, p.value,t,df,confidence_min,confidence_max,mean_in_group_CO2,mean_in_group_control)
c
}
table=tsf(mydata,"lemon")
table=table[-1,]
for (i in unique(mydata$species)){
table = rbind(table,tsf(mydata, i))
}
#print(table)
flextable(table,  col_keys = names(table),
cwidth = 0.75,
cheight = 0.25,
defaults = list(),
theme_fun = theme_booktabs)
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
a1=flextable(table,  col_keys = names(table),
cwidth = 0.75,
cheight = 0.25,
defaults = list(),
theme_fun = theme_booktabs)
set_caption(a1,caption = "The result from the t.test of all speciess",autonum = NULL,style = "Table Caption",html_escape = TRUE)
table[5,8]
table[5,7]
# Using the resulting object created above, which should be a table with all the summary statistics, t, df and p-value for each species create a table. Note that there is a tab.cap argument in the chunk arguments. Write a caption here.
a1=flextable(table,  col_keys = names(table),
cwidth = 0.75,
cheight = 0.25,
defaults = list(),
theme_fun = theme_booktabs)
table
set_caption(a1,caption = "The result from the t.test of all speciess",autonum = NULL,style = "Table Caption",html_escape = TRUE)
